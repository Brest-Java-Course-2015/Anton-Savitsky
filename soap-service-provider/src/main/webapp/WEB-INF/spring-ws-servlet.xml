<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:sws="http://www.springframework.org/schema/web-services"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services.xsd">


    <!-- Configuration of DAO, Transactions levels-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:database.properties</value>
                <value>classpath:dao.properties</value>
                <value>classpath:service.properties</value>
            </list>
        </property>
    </bean>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--
    <jdbc:initialize-database data-source="dataSource">
        <jdbc:script location="classpath:create-tables.sql"/>
        <jdbc:script location="classpath:data-script.sql"/>
    </jdbc:initialize-database>
    -->

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="carDao" class="com.epam.brest.course2015.dao.CarDaoJdbcImpl"/>
    <bean id="producerDao" class="com.epam.brest.course2015.dao.ProducerDaoJdbcImpl"/>

    <bean id="carTransactions" class="com.epam.brest.course2015.transactions.CarTransactionsImpl"/>

    <bean id="producerTransactions" class="com.epam.brest.course2015.transactions.ProducerTransactionsImpl"/>

    <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes" value="application/json" />
        <property name="prettyPrint" value="true" />
    </bean>

    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="jsonConverter"/>
            </list>
        </property>
    </bean>


    <aop:aspectj-autoproxy/>

    <bean id="myLogger" class="com.epam.brest.course2015.test.MyLogger"/>

    <!--Liquid Lib-->
    <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
        <property name="dataSource" ref="dataSource" />
        <property name="changeLog" value="classpath:db-changelog.xml" />
        <!--
        contexts specifies the runtime contexts to use.
        -->
        <property name="contexts" value="test, production" />
    </bean>

      <!--<bean id="payloadMapping"
             class="org.springframework.ws.server.endpoint.mapping.PayloadRootQNameEndpointMapping">
              <property name="endpointMap">
                     <map>
                            <entry key="GetCarByIdRequest" value-ref="getCarByIdEndpoint"/>
                     </map>
              </property>
      </bean>-->


    <!-- -->
    <sws:annotation-driven />

    <context:component-scan base-package="com.epam.brest.course2015.soap"/>

    <context:component-scan base-package="com.epam.brest.course2015.core"/>

    <!--<bean id="getCarByIdEndpoint" class="com.epam.brest.course2015.soap.GetCarByIdEndpoint">
           <property name="marshaller" ref="marshaller"/>
           <property name="unmarshaller" ref="marshaller"/>
           <property name="carTransactions" ref="carTransactions"/>
    </bean>-->

       <!--<bean id="marshaller" class="org.springframework.oxm.castor.CastorMarshaller">
              <property name="mappingLocation" value="classpath:mapping.xml"/>
       </bean>
-->
       <bean id="endpointExceptionResolver"
             class="org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver">
              <property name="exceptionMappings">
                     <props>
                            <prop key="org.springframework.oxm.UnmarshallingFailureException">
                                   SENDER, Invalid message received from sender
                            </prop>
                            <prop key="org.springframework.oxm.ValidationFailureException">
                                   SENDER, Invalid message received from sender
                            </prop>
                     </props>
              </property>
              <property name="defaultFault" value="RECEIVER, Server side error"/>
       </bean>


    <bean id="car" class="org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition" lazy-init="true">

            <property name="schemaCollection">
                <bean class="org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection">
                    <property name="inline" value="true" />
                    <property name="xsds">
                        <list>
                            <value>classpath:Operations.xsd</value>
                        </list>
                    </property>
                </bean>
            </property>

              <property name="portTypeName" value="ws-service"/>
              <property name="serviceName" value="ws-service" />
              <property name="locationUri" value="/services"/>
    </bean>

</beans>